// <auto-generated />
using System;
using Ebret4m4n.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ebret4m4n.Repository.Migrations
{
    [DbContext(typeof(EbretAmanDbContext))]
    [Migration("20250511152002_editChildRelationship")]
    partial class editChildRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ebret4m4n.Entities.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("HealthCareCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Village")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCareCenterId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "IX_ApplicationUser_Email");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCareCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("HealthCareCenterId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCarerCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ChildId");

                    b.HasIndex("HealthCarerCenterId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Child", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("AgeInMonth")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("CAST(DATEDIFF(DAY, BirthDate, GETDATE()) / 30.0 AS INT)", false);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsNormal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientHistory")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.CityAdminStaff", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GovernorateAdminId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("GovernorateAdminId");

                    b.ToTable("CityAdminStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Complaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.GovernorateAdminStaff", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UserId");

                    b.ToTable("GovernorateAdminStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthCareCenter", b =>
                {
                    b.Property<Guid>("HealthCareCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CityAdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HealthCareCenterName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecondDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("HealthCareCenterId");

                    b.HasIndex("CityAdminId");

                    b.HasIndex("HealthCareCenterName");

                    b.ToTable("HealthCareCenters");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthReportFile", b =>
                {
                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("UploadedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("FilePath");

                    b.HasIndex("ChildId");

                    b.ToTable("HealthReportFiles");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Inventory", b =>
                {
                    b.Property<Guid>("HealthCareCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Antigen")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.HasKey("HealthCareCenterId", "Antigen");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MainInventory", b =>
                {
                    b.Property<string>("InventoryLocation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Antigen")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("CityAdminStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GovernorateAdminStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InventoryLocation", "Antigen");

                    b.HasIndex("CityAdminStaffId");

                    b.HasIndex("GovernorateAdminStaffId");

                    b.ToTable("MainInventory");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MedicalStaff", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityAdminStaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityAdminStaffUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HCCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HealthCareCenterCity")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HealthCareCenterGovernorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HealthCareCenterName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HealthCareCenterVillage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecondDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CityAdminStaffId");

                    b.HasIndex("CityAdminStaffUserId");

                    b.ToTable("MedicalStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("RecievedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityAdminStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<string>("GovernorateAdminStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityAdminStaffId");

                    b.HasIndex("GovernorateAdminStaffId");

                    b.HasIndex("MedicalStaffId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Antigen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Transaction", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<long?>("Amount")
                        .HasColumnType("bigint");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId")
                        .IsUnique();

                    b.HasIndex("SessionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChildAge")
                        .HasColumnType("int");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<bool>("IsTaken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("Name");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a14d5168-b3b6-4c27-ad4c-f8d43ef2775b",
                            Name = "parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = "52c3f2a1-b076-4369-921b-dbde2acc1abc",
                            Name = "doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "2fa96afd-744d-47fc-b385-445be31e1754",
                            Name = "organizer",
                            NormalizedName = "ORGANIZER"
                        },
                        new
                        {
                            Id = "cb5b2245-eecd-447a-bba4-a69f4b401b26",
                            Name = "governorateAdmin",
                            NormalizedName = "GOVERNORATEADMIN"
                        },
                        new
                        {
                            Id = "a5069509-db22-4904-b2a9-29e9abc31e64",
                            Name = "cityAdmin",
                            NormalizedName = "CITYADMIN"
                        },
                        new
                        {
                            Id = "b44675bf-b2f3-404a-b546-73000d75b599",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.ApplicationUser", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.HealthCareCenter", "HealthCareCenter")
                        .WithMany("Users")
                        .HasForeignKey("HealthCareCenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("HealthCareCenter");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Appointment", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithMany("Appointments")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.HealthCareCenter", "HealthCareCenter")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthCareCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("HealthCareCenter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Certificate", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.HealthCareCenter", "HealthCareCenter")
                        .WithMany("Certificates")
                        .HasForeignKey("HealthCarerCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("HealthCareCenter");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Chat", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Child", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany("Children")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.CityAdminStaff", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.GovernorateAdminStaff", "GovernorateAdminStaff")
                        .WithMany("CityAdminStaffs")
                        .HasForeignKey("GovernorateAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GovernorateAdminStaff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Complaint", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.GovernorateAdminStaff", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthCareCenter", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.CityAdminStaff", "CityAdmin")
                        .WithMany("HealthCareCenters")
                        .HasForeignKey("CityAdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CityAdmin");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthReportFile", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithMany("HealthReportFiles")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Inventory", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.HealthCareCenter", "HealthCareCenter")
                        .WithMany("Inventories")
                        .HasForeignKey("HealthCareCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCareCenter");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MainInventory", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.CityAdminStaff", "CityAdminStaff")
                        .WithMany("MainInventories")
                        .HasForeignKey("CityAdminStaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Ebret4m4n.Entities.Models.GovernorateAdminStaff", "GovernorateAdminStaff")
                        .WithMany("MainInventories")
                        .HasForeignKey("GovernorateAdminStaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CityAdminStaff");

                    b.Navigation("GovernorateAdminStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MedicalStaff", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.CityAdminStaff", "CityAdminStaff")
                        .WithMany()
                        .HasForeignKey("CityAdminStaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.CityAdminStaff", null)
                        .WithMany("MedicalStaff")
                        .HasForeignKey("CityAdminStaffUserId");

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityAdminStaff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Notification", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Order", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.CityAdminStaff", "CityAdminStaff")
                        .WithMany("Orders")
                        .HasForeignKey("CityAdminStaffId");

                    b.HasOne("Ebret4m4n.Entities.Models.GovernorateAdminStaff", "GovernorateAdminStaff")
                        .WithMany("Orders")
                        .HasForeignKey("GovernorateAdminStaffId");

                    b.HasOne("Ebret4m4n.Entities.Models.MedicalStaff", "MedicalStaff")
                        .WithMany("Orders")
                        .HasForeignKey("MedicalStaffId");

                    b.Navigation("CityAdminStaff");

                    b.Navigation("GovernorateAdminStaff");

                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.OrderItem", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Transaction", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithOne("Transaction")
                        .HasForeignKey("Ebret4m4n.Entities.Models.Transaction", "ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "Parent")
                        .WithMany("Transactions")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Vaccine", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithMany("Vaccines")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.ApplicationUser", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Certificates");

                    b.Navigation("Children");

                    b.Navigation("Notifications");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Child", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HealthReportFiles");

                    b.Navigation("Transaction")
                        .IsRequired();

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.CityAdminStaff", b =>
                {
                    b.Navigation("HealthCareCenters");

                    b.Navigation("MainInventories");

                    b.Navigation("MedicalStaff");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.GovernorateAdminStaff", b =>
                {
                    b.Navigation("CityAdminStaffs");

                    b.Navigation("MainInventories");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthCareCenter", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Certificates");

                    b.Navigation("Inventories");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MedicalStaff", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
