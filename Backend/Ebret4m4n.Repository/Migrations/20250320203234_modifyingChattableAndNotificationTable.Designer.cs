// <auto-generated />
using System;
using Ebret4m4n.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ebret4m4n.Repository.Migrations
{
    [DbContext(typeof(EbretAmanDbContext))]
    [Migration("20250320203234_modifyingChattableAndNotificationTable")]
    partial class modifyingChattableAndNotificationTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ebret4m4n.Entities.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("HealthCareCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Village")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCareCenterId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "IX_ApplicationUser_Email");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCareCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("HealthCareCenterId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HealthCarerCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ChildId");

                    b.HasIndex("HealthCarerCenterId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Child", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("AgeInMonth")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("CAST(DATEDIFF(DAY, BirthDate, GETDATE()) / 30.0 AS INT)", false);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsNoramal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientHistory")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.CityAdminStaff", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GovernorateAdminId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("GovernorateAdminId");

                    b.ToTable("CityAdminStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Complaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.GovernorateAdminStaff", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UserId");

                    b.ToTable("GovernorateAdminStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthCareCenter", b =>
                {
                    b.Property<Guid>("HealthCareCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HealthCareCenterName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecondDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Village")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("HealthCareCenterId");

                    b.HasIndex("HealthCareCenterName");

                    b.ToTable("HealthCareCenters");

                    b.HasData(
                        new
                        {
                            HealthCareCenterId = new Guid("ab18bc95-d83c-4a26-8971-4bc2fad39deb"),
                            City = "بني مزار",
                            FirstDay = "Monday",
                            Governorate = "المنيا",
                            HealthCareCenterName = "الوحده المحليه بقريه ابوجرج",
                            SecondDay = "Tuesday",
                            Village = "ابوجرج"
                        },
                        new
                        {
                            HealthCareCenterId = new Guid("773fbd65-6e90-4699-b811-ff7b374144ea"),
                            City = "بني مزار",
                            FirstDay = "Sunday",
                            Governorate = "المنيا",
                            HealthCareCenterName = "الوحده المحليه بقريه صفط ابوجرج",
                            SecondDay = "Wednesday",
                            Village = "صفط ابوجرج"
                        },
                        new
                        {
                            HealthCareCenterId = new Guid("5a88b5dc-2353-41d8-9ec1-57ea42f70cfe"),
                            City = "المنيا",
                            FirstDay = "Saturday",
                            Governorate = "المنيا",
                            HealthCareCenterName = "الوحده المحليه بقريه البرجايه",
                            SecondDay = "Tuesday",
                            Village = "البرجايه"
                        },
                        new
                        {
                            HealthCareCenterId = new Guid("bb79b47e-3457-45ed-bd0d-c0ac43d5e7e7"),
                            City = "مغاغا",
                            FirstDay = "Sunday",
                            Governorate = "المنيا",
                            HealthCareCenterName = "الوحده المحليه بقريه دهمرو",
                            SecondDay = "Wednesday",
                            Village = "دهمرو"
                        },
                        new
                        {
                            HealthCareCenterId = new Guid("9d604a2c-ae6f-420c-a58a-333d5b959709"),
                            City = "العدوي",
                            FirstDay = "Sunday",
                            Governorate = "المنيا",
                            HealthCareCenterName = "الوحده المحليه بالعدوي",
                            SecondDay = "Wednesday",
                            Village = "العدوي"
                        },
                        new
                        {
                            HealthCareCenterId = new Guid("ac6fe554-db7e-4c93-b9bc-2ced83ef8618"),
                            City = "الجيزه",
                            FirstDay = "Sunday",
                            Governorate = "الجيزه",
                            HealthCareCenterName = "الوحده المحليه بالجيزه",
                            SecondDay = "Wednesday",
                            Village = "منيل الروضه"
                        },
                        new
                        {
                            HealthCareCenterId = new Guid("11f66134-aa05-4b17-8aa7-06065c6e1b90"),
                            City = "عين شمس",
                            FirstDay = "Sunday",
                            Governorate = "القاهره",
                            HealthCareCenterName = "الوحده المحليه بالقاهره",
                            SecondDay = "Tuesday",
                            Village = "عين شمس"
                        });
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthReportFile", b =>
                {
                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("UploadedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("FilePath");

                    b.HasIndex("ChildId");

                    b.ToTable("HealthReportFiles");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Inventory", b =>
                {
                    b.Property<Guid>("HealthCareCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Antigen")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.HasKey("HealthCareCenterId", "Antigen");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MainInventory", b =>
                {
                    b.Property<string>("InventoryLocation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Antigen")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("CityAdminStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GovernorateAdminStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InventoryLocation", "Antigen");

                    b.HasIndex("CityAdminStaffId");

                    b.HasIndex("GovernorateAdminStaffId");

                    b.ToTable("MainInventory");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MedicalStaff", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HCCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HealthCareCenterCity")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HealthCareCenterGovernorate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HealthCareCenterName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HealthCareCenterVillage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecondDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("MedicalStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("RecievedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Antigen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityAdminStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<string>("GovernorateAdminStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalStaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityAdminStaffId");

                    b.HasIndex("GovernorateAdminStaffId");

                    b.HasIndex("MedicalStaffId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.SideEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId");

                    b.ToTable("SideEffects");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChildAge")
                        .HasColumnType("int");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)");

                    b.Property<bool>("IsTaken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("Name");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b3d22860-0095-445c-b7c4-01287deb1170",
                            Name = "parent",
                            NormalizedName = "PARENT"
                        },
                        new
                        {
                            Id = "162c723a-220d-4c0f-b1e9-108f4ca51593",
                            Name = "doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "b11e33c2-21ce-4f1b-bd79-c2eb4842c43c",
                            Name = "organizer",
                            NormalizedName = "ORGANIZER"
                        },
                        new
                        {
                            Id = "65b0991c-ba13-4df7-a6c4-494bfc9f5b15",
                            Name = "governorateAdmin",
                            NormalizedName = "GOVERNORATEADMIN"
                        },
                        new
                        {
                            Id = "69a35668-ac5a-435f-a8f3-345d8085b960",
                            Name = "cityAdmin",
                            NormalizedName = "CITYADMIN"
                        },
                        new
                        {
                            Id = "cdf25cf2-cd8d-4601-9b40-da278427135e",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.ApplicationUser", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.HealthCareCenter", "HealthCareCenter")
                        .WithMany("Users")
                        .HasForeignKey("HealthCareCenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("HealthCareCenter");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Appointment", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithMany("Appointments")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.HealthCareCenter", "HealthCareCenter")
                        .WithMany("Appointments")
                        .HasForeignKey("HealthCareCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("HealthCareCenter");

                    b.Navigation("User");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Certificate", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.HealthCareCenter", "HealthCareCenter")
                        .WithMany("Certificates")
                        .HasForeignKey("HealthCarerCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("HealthCareCenter");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Chat", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Child", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany("Children")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.CityAdminStaff", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.GovernorateAdminStaff", "GovernorateAdminStaff")
                        .WithMany("CityAdminStaffs")
                        .HasForeignKey("GovernorateAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GovernorateAdminStaff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Complaint", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.GovernorateAdminStaff", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthReportFile", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithMany("HealthReportFiles")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Inventory", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.HealthCareCenter", "HealthCareCenter")
                        .WithMany("Inventories")
                        .HasForeignKey("HealthCareCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCareCenter");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MainInventory", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.CityAdminStaff", "CityAdminStaff")
                        .WithMany("MainInventories")
                        .HasForeignKey("CityAdminStaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Ebret4m4n.Entities.Models.GovernorateAdminStaff", "GovernorateAdminStaff")
                        .WithMany("MainInventories")
                        .HasForeignKey("GovernorateAdminStaffId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CityAdminStaff");

                    b.Navigation("GovernorateAdminStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.MedicalStaff", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Notification", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Order", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.CityAdminStaff", "CityAdminStaff")
                        .WithMany()
                        .HasForeignKey("CityAdminStaffId");

                    b.HasOne("Ebret4m4n.Entities.Models.GovernorateAdminStaff", "GovernorateAdminStaff")
                        .WithMany()
                        .HasForeignKey("GovernorateAdminStaffId");

                    b.HasOne("Ebret4m4n.Entities.Models.MedicalStaff", "MedicalStaff")
                        .WithMany()
                        .HasForeignKey("MedicalStaffId");

                    b.Navigation("CityAdminStaff");

                    b.Navigation("GovernorateAdminStaff");

                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.SideEffect", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Vaccine", "Vaccine")
                        .WithMany("SideEffects")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Vaccine", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.Child", "Child")
                        .WithMany("Vaccines")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ebret4m4n.Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.ApplicationUser", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Certificates");

                    b.Navigation("Children");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Child", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HealthReportFiles");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.CityAdminStaff", b =>
                {
                    b.Navigation("MainInventories");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.GovernorateAdminStaff", b =>
                {
                    b.Navigation("CityAdminStaffs");

                    b.Navigation("MainInventories");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.HealthCareCenter", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Certificates");

                    b.Navigation("Inventories");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ebret4m4n.Entities.Models.Vaccine", b =>
                {
                    b.Navigation("SideEffects");
                });
#pragma warning restore 612, 618
        }
    }
}
